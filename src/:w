data Expression a = Value a | Application Token Token
data Type = Mapping Type Type | IntType deriving (Eq, Show)
data Token = Function Type Type (Token -> Token) | Primitive Type String

type Error = String

eval :: Token -> Either Error Token
eval (Value t s) = parse t s
eval (Function t 

checkType :: Expression Token -> Bool
checkType (Value _) = True
checkType (Application (Function t1 _ _) (Primitive t _)) = t == t1
checkType (Application (Function t1 _
